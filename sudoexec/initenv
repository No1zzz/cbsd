#!/bin/sh
#v10.0.4
export distdir=${distdir:-"/usr/local/cbsd"}
globalconf="${distdir}/cbsd.conf";
MYLOCK="/tmp/initenv.lock"
MYDESC="Node re-initialization"
MYARG=""
MYOPTARG=""

if [ ! -f "${globalconf}" ]; then
    ${ECHO} "${MAGENTA}no such conf file${NORMAL}";
    exit
fi

if [ "$1" = "--help" ]; then
    echo "${MYDESC}"
    exit 0
fi

[ -n "${1}" -a -f "${1}" ] && INITCFG="${1}" && shift

desc_question()
{
    local _DEFAULT
    local _DESC

    if [ "${inter}" = "0" ]; then
	eval answ=\$$1
	return 0
    fi

    eval _DEFAULT="\$${1}_default"
    eval _DESC="\$${1}_desc"

    case "$1" in
	"nodename")
	    ${ECHO} "${BOLD}${1}: ${_DESC}: ${GREEN}${_DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${_DEFAULT}"
	    return 0
	;;
	"nat_enable")
	    if ! getyesno "${BOLD}${1}: ${_DESC}?"; then
		answ=0
		return 0
	    fi
	    [ -z "$answ" ] && answ="${_DEFAULT}"
	    answ=1
	    return 0
	;;
	"nodeip")
	    ${ECHO} "${BOLD}${1}: ${_DESC} (used for node interconnection), e.g: ${GREEN}${_DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${_DEFAULT}"
	    return 0
	;;
	"jnameserver")
	    ${ECHO} "${BOLD}${1}: ${_DESC} (for jails resolv.conf), e.g.: ${GREEN}${_DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${_DEFAULT}"
	    return 0
	;;
	"nodeippool")
	    ${ECHO} "${BOLD}${1}: ${_DESC} (networks for jails)${NORMAL}"
	    ${ECHO} "${MAGENTA}Hint: use space as delimer for  multiple networks, e.g.: ${GREEN}${_DEFAULT}${NORMAL}"
	    read answ
	    [ -z "$answ" ] && answ="${_DEFAULT}"
	    return 0
	;;
	"fbsdrepo")
	    if getyesno "${BOLD}${1}: ${_DESC} for fetching base/kernel?"; then
		answ=1
	    else
		answ=0
	    fi
	    return 0
	;;
	"zfsfeat")
	    if getyesno "${BOLD}${1}: You running on ZFS-based system. ${_DESC}${NORMAL}"; then
		answ=1
	    else
		answ=0
	    fi
	    return 0
	;;
	"mdtmp")
#will be processed differently. temporary hide this
#	    ${ECHO} "${BOLD}${1}: ${_DESC} ?(${_DEFAULT} mb default)${NORMAL}"
#	    ${ECHO} "${MAGENTA}This md disk will be used for temporary operation? 0 - for disable or N (in mb) for disk size e.g: ${GREEN}${_DEFAULT}${NORMAL}"
#	    read answ
#	    [ -z "${answ}" ] && answ=0
	    answ=0
	    return 0
	;;
	"stable")
	    ${ECHO} "${BOLD}${1}: ${_DESC} ?${NORMAL}"
	    ${ECHO} "${MAGENTA}(STABLE_X instead of RELEASE_X_Y branch for base/kernel will be used), e.g.: ${GREEN}${_DEFAULT} ${MAGENTA}(use release)${NORMAL}"
	    read answ
	    [ -z "${answ}" ] && answ="${_DEFAULT}"
	    return 0
	;;
	"parallel")
	    ${ECHO} "${BOLD}${1}: ${_DESC} ?${NORMAL}"
	    ${ECHO} "${MAGENTA}(0 - no parallel or positive value (in seconds) as timeout for next parallel sequence) e.g: ${GREEN}${_DEFAULT}${NORMAL}"
	    read answ
	    [ -z "${answ}" ] && answ="${_DEFAULT}"
	    return 0
	    ;;
	*)
	    return 1
	    ;;
    esac
}

# check for old install and if exist - execute pre scripts from upgrade directory
# setup pkg if no other cfg
phase0()
{
    local myversion cbsdd_enable cbsd_workdir workdir

    . ${distdir}/${localcbsdconffile}
    newver="${myversion}"

    . /etc/rc.conf

    [ -z "${cbsdd_enable}" -o -z "${cbsd_workdir}" ] && return 0

    [ ! -f "${cbsd_workdir}/cbsd.conf" ] && return 0

    workdir="${cbsd_workdir}"
    . "${cbsd_workdir}/cbsd.conf"

    oldver="${myversion}"

    ${ECHO} "${MAGENTA}[Stage 0:${GREEN} upgrading and migration data from ${oldver} to ${newver}${MAGENTA}]${NORMAL}"

    [ -d "${distdir}/upgrade" ] && find ${distdir}/upgrade/ -type f -depth 1 -maxdepth 1 -name pre-patch-\* -exec {} \;
}

# execute post scripts from upgrade directory
phaseX()
{
    local myversion cbsdd_enable cbsd_workdir workdir


    ${ECHO} "${MAGENTA}[Stage X:${GREEN} upgrading${MAGENTA}]${NORMAL}"

    [ -d "${distdir}/upgrade" ] && find ${distdir}/upgrade/ -type f -depth 1 -maxdepth 1 -name post-patch-\* -exec {} \;
#	will be processed differently, temporary disabled
#    ${distdir}/misc/config_pkgrepo -t ${etcdir}/pkg.conf /
}



phase1()
{
    local cbsd_home
    . ${distdir}/${localcbsdconffile}

    ${ECHO} "${MAGENTA}[Stage 1:${GREEN} account & dir hier${MAGENTA}]${NORMAL}"
    /usr/bin/id ${cbsduser} > /dev/null 2>&1

    if [ $? -eq 1 ]; then
	echo "No such user ${cbsduser}. Please follow instruction at http://www.bsdstore.ru/en/installing_cbsd.html"
	echo "if you install not from the ports"
	exit 1
    fi

    # check for correct homedir
    cbsd_home=$( grep ^cbsd /etc/master.passwd | cut -d : -f 9 )

    [ "${cbsd_home}" != "${workdir}" ] && /usr/sbin/pw usermod ${cbsduser} -d ${workdir} >/dev/null 2>&1

    [ ! -d "${workdir}" ] && mkdir -m 755 ${workdir}
    $ECHO "${MAGENTA} * Check hier and permission..."
    mtree -deU -f ${distdir}/etc/cbsd.mtree -p ${workdir}
    printf "${NORMAL}"
    [ -f "/usr/local/bin/cbsd" ] && chmod 555 /usr/local/bin/cbsd
}

phase2()
{
    local _dir _ldir _rdir _file _dirhier _d

    ${ECHO} "${MAGENTA}[Stage 2: ${GREEN}build tools${MAGENTA}]${NORMAL}"

    /usr/bin/cc ${distdir}/bin/cbsdsftp.c -o ${bindir}/cbsdsftp -lssh2 -L/usr/local/lib -I/usr/local/include
    /usr/bin/cc ${distdir}/bin/cbsdssh.c -o ${bindir}/cbsdssh -lssh2 -L/usr/local/lib -I/usr/local/include
    /usr/bin/cc ${distdir}/bin/cfetch.c -o ${bindir}/cfetch -lfetch

    installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${distdir}/bin/rexe ${bindir}/rexe

    /usr/bin/cc ${distdir}/sbin/netmask.c -o ${sbindir}/netmask
    /usr/bin/cc ${distdir}/tools/src/cbsd_pwait.c -o ${toolsdir}/cbsd_pwait

    cc ${distdir}/misc/src/sqlcli.c -lsqlite3 -L/usr/local/lib -I/usr/local/include -o ${miscdir}/sqlcli
    cc ${distdir}/misc/src/cbsdlogtail.c -o ${miscdir}/cbsdlogtail
    cc ${distdir}/misc/src/elf_tables.c -lelf -o ${miscdir}/elf_tables
    cc ${distdir}/misc/src/conv2human.c -lelf -o ${miscdir}/conv2human -lutil

    cc ${distdir}/sbin/cbsdd.c -o ${sbindir}/cbsdd

    if [ -f "/usr/local/bin/cbsd" ]; then
	CURVERSION=$(/usr/local/bin/cbsd -c version)
	[ "${CURVERSION}" != "${myversion}" ] && make -C ${distdir}/bin/cbsd clean && make -DCBSDVERSION="${ncver}" -C ${distdir}/bin/cbsd && make -C ${distdir}/bin/cbsd install && make -C ${distdir}/bin/cbsd clean
    else
	make -C ${distdir}/bin/cbsd clean && make -DCBSDVERSION="${ncver}" -C ${distdir}/bin/cbsd && make -C ${distdir}/bin/cbsd install && make -C ${distdir}/bin/cbsd clean
    fi

    #### CP SCRIPTS with override and executable
    _dirhier="jailctl \
	    nodectl \
	    rc.d \
	    misc \
	    system \
	    tools"

    for _d in ${_dirhier}; do
	_ldir="${workdir}/${_d}"
	_rdir="${distdir}/${_d}"
	for _file in `/usr/bin/find ${_rdir} -depth 1 -maxdepth 1 -type f -exec basename {} \;`; do
	    installne "-o ${cbsduser} -g ${cbsduser} -m 555" ${_rdir}/${_file} ${_ldir}/${_file}
	done
    done

    #### CP SCRIPTS with override and readonly
    _dirhier="share/dialog etc/defaults"

    for _d in ${_dirhier}; do
	_ldir="${workdir}/${_d}"
	_rdir="${distdir}/${_d}"
	    for _file in `/usr/bin/find ${_rdir} -depth 1 -maxdepth 1 -type f -exec basename {} \;`; do
		installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${_rdir}/${_file} ${_ldir}/${_file}
	    done
    done

    /usr/bin/cc ${distdir}/misc/src/chk_arp_byip.c -o ${miscdir}/chk_arp_byip

    #### CP SCRIPTS without override
    _dirhier="share \
	share/helpers \
	etc"

    cat > ${etcdir}/cbsd_sudoers <<EOF
Defaults     env_keep += "workdir DIALOG NOCOLOR"
Cmnd_Alias   CBSD_CMD = ${sudoexecdir}/*,/usr/local/cbsd/sudoexec/*
${cbsduser}   ALL=(ALL) NOPASSWD: CBSD_CMD
EOF

    for _d in ${_dirhier}; do
	_ldir="${workdir}/${_d}"
	_rdir="${distdir}/${_d}"
	for _file in `/usr/bin/find ${_rdir} -depth 1 -maxdepth 1 -type f -exec basename {} \;`; do
	    [ ! -f "${_ldir}/${_file}" ] && install -o ${cbsduser} -g ${cbsduser} -m 444 ${_rdir}/${_file} ${_ldir}/${_file}
	done
    done

    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${globalconf} ${workdir}/cbsd.conf
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/bhyve.subr ${workdir}/bhyve.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/nc.subr ${workdir}/nc.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/nc.lua ${workdir}/nc.lua
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/zfs.subr ${workdir}/zfs.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/tools.subr ${workdir}/tools.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/mdtools.subr ${workdir}/mdtools.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/freebsd_world.subr ${workdir}/freebsd_world.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/initenv.subr ${workdir}/initenv.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/ansiicolor.subr ${workdir}/ansiicolor.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/dialog.subr ${workdir}/dialog.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/nodes.subr ${workdir}/nodes.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/strings.subr ${workdir}/strings.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/rcconf.subr ${workdir}/rcconf.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/vnet.subr ${workdir}/vnet.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/emulator.subr ${workdir}/emulator.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/rctl.subr ${workdir}/rctl.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/jrctl.subr ${workdir}/jrctl.subr

    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/securecmd ${workdir}/securecmd
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/system.subr ${workdir}/system.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/jfs.subr ${workdir}/jfs.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/build.subr ${workdir}/build.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/universe.subr ${workdir}/universe.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/settings-tui.subr ${workdir}/settings-tui.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/distccache.subr ${workdir}/distccache.subr
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/mailtools.subr ${workdir}/mailtools.subr

    #here is file with overwriting
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/jail-arg ${sharedir}/jail-arg
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/rctl.conf ${sharedir}/rctl.conf
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/bhyve.conf ${sharedir}/bhyve.conf
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/bhyvedsk.conf ${sharedir}/bhyvedsk.conf
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/jrctl-arg ${sharedir}/jrctl-arg
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-fwcounters.schema ${sharedir}/local-fwcounters.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-gw.schema ${sharedir}/local-gw.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-jails.schema ${sharedir}/local-jails.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-local.schema ${sharedir}/local-local.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-net.schema ${sharedir}/local-net.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-rctl.schema ${sharedir}/local-rctl.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-bhyve.schema ${sharedir}/local-bhyve.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-bhyvedsk.schema ${sharedir}/local-bhyvedsk.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/local-unconfigured.schema ${sharedir}/local-unconfigured.schema
    installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/share/node-nodelist.schema ${sharedir}/node-nodelist.schema

    cp -R ${distdir}/etc/periodic ${etcdir}/ && chown -R ${cbsduser}:${cbsduser} ${etcdir}/periodic
    cp -Rn ${distdir}/etc/zonekeys ${etcdir}/ && chown -R ${cbsduser}:${cbsduser} ${etcdir}/zonekeys

    if [ ! -f "/usr/local/etc/sudoers.d/cbsd_sudoers" ]; then
	if getyesno "${BOLD}Shall i add cbsd user into /usr/local/etc/sudoers.d/cbsd_sudoers sudo file to obtian root privileges for the most cbsd commands?"; then
	    [ ! -d /usr/local/etc/sudoers.d ] && mkdir -p /usr/local/etc/sudoers.d
	    installne "-o root -g wheel -m 440" ${etcdir}/cbsd_sudoers /usr/local/etc/sudoers.d/cbsd_sudoers
	fi
    fi

    #    [ -d ${sshdir} ] || mkdir -m 0700 ${sshdir}
    #    [ -d "${sshdir}/sockets" ] || mkdir -m 0700 "${sshdir}/sockets"
    [ -f "${sshdir}/config" ] || installne "-o ${cbsduser} -g ${cbsduser} -m 644" ${distdir}/.ssh/config ${sshdir}/config

    # workaround for move jail-skel hier in cbsd 10.0.0
    [ ! -d "${sharedir}/jail-skel/etc" ] && mkdir -p ${sharedir}/jail-skel && cp -a ${distdir}/share/jail-skel/* ${sharedir}/jail-skel/
    chmod 0600 ${sharedir}/jail-skel/etc/master.passwd ${sharedir}/jail-skel/etc/spwd.db

    cp -Rp ${distdir}/modules ${workdir}
}

phase3()
{
    local _hname _sname _namenotset

    ${ECHO} "${MAGENTA}[Stage 3: ${GREEN}local settings${MAGENTA}]${NORMAL}"
    _namenotset=1

    while [ ${_namenotset} ]; do
	_hname=`/bin/hostname`
	_sname=`/bin/hostname -s`

	if [ -z "${_hname}" ]; then
	    ${ECHO} "${MAGENTA}Hostname is empty. Please set this:${NORMAL}"
	    read p
	    if getyesno "${MAGENTA}I will use hostname: ${GREEN}$p${NORMAL}"; then
		hostname $p
		_hname=`/bin/hostname`
		_sname=`/bin/hostname -s`
	    fi
	fi

	if [ "${_hname}" = "${_sname}" ]; then
	    ${ECHO} "${GREEN}${_hname}${MAGENTA} - Wrong hostname. Full hostname must be not equal short hostname. Please set FQDN (${GREEN}${_hname}.my.domain${MAGENTA} for example):${NORMAL}"
	    read p
	    if getyesno "${BOLD}Shall i modify the /etc/rc.conf to sets new hostname value?: ${GREEN}$p${NORMAL}"; then
		hostname $p
		sysrc -vf /etc/rc.conf hostname="${p}"
	    fi
		else break;
	fi
    done

    configure_cron
}

phase4()
{
    ${ECHO} "${MAGENTA}[Stage 4: ${GREEN}update default skel resolv.conf${MAGENTA}]${NORMAL}"

    for i in $(${ECHO} $jnameserver | tr "," " "); do
	if [ `/usr/bin/grep -c ${i} ${sharedir}/jail-skel/etc/resolv.conf` = 0 ]; then
	    TMPR="${ftmpdir}/resolv.$$"
	    # system nserver must be always last
	    ${ECHO} "nameserver ${i}" > ${TMPR}
	    cat ${sharedir}/jail-skel/etc/resolv.conf >> ${TMPR}
	    mv ${TMPR} ${sharedir}/jail-skel/etc/resolv.conf
	fi
    done
}

phase5()
{
    local _uncfg _uninit _checkme _myfs _ret _val

    ${ECHO} "${MAGENTA}[Stage 5: ${GREEN}freshing inventory${MAGENTA}]${NORMAL}"

    [ -f "${inventory}" ] && . ${inventory}

    #system information
    . ${toolsdir}/sysinv

    init_items_desc
    init_items_default
    if [ -z "${nodename}" ]; then
	desc_question nodename
	nodename=${answ}
    fi

    [ -z "${nodename}" ] && err 1 "nodename must be not empty"

    [ ! -f "${nodenamefile}" ] && echo "${nodename}" > "${nodenamefile}"
    [ ! -f "${dbdir}/nodes.sqlite" ] && /usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/nodes.sqlite ${distdir}/share/node-nodelist.schema

    if [ ! -f "${dbdir}/inv.${nodename}.sqlite" ]; then
	/usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-unconfigured.schema
	/usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-local.schema
	/usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-jails.schema
	$ECHO "${MAGENTA}Empty inventory database created: ${GREEN}${dbdir}/inv.${nodename}.sqlite${NORMAL}"
	${miscdir}/sqlcli ${dbdir}/inv.${nodename}.sqlite "insert into local ( nodename ) VALUES ( \"${nodename}\" )"
    fi

    /usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-local.schema
    /usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-jails.schema
    /usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-rctl.schema
    /usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-bhyve.schema
    /usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/inv.${nodename}.sqlite ${distdir}/share/local-bhyvedsk.schema

    [ -f "${dbdir}/nodes.sqlite" ] && /usr/local/bin/cbsd ${miscdir}/updatesql ${dbdir}/nodes.sqlite ${distdir}/share/node-nodelist.schema

    /bin/ln -sf ${dbdir}/inv.${nodename}.sqlite ${dbdir}/local.sqlite

    _myfs="ufs"

    if kldstat -qm zfs >/dev/null 2>&1; then
	/sbin/zfs list ${workdir} > /dev/null 2>&1
	[ $? -eq 0 ] && _myfs="zfs"
    fi

    _uncfg=`${miscdir}/sqlcli ${dbdir}/local.sqlite SELECT items FROM unconfigured`

    [ $? -ne 0 ] && err 1 "Error for unconfigured query"

    for _checkme in ${_uncfg}; do
	for _uninit in ${USERINI}; do
	    # skip for nodename which is already set
	    [ "${_uninit}" = "nodename" ] && continue
	    # temporary skip for mdtmp
	    [ "${_uninit}" = "mdtmp" ] && continue
	    if [ "${_uninit}" = "${_checkme}" ]; then
		if [ "${_checkme}" = "zfsfeat" -a ${_myfs} != "zfs" ]; then
		    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET zfsfeat=\"0\"
		    continue
		fi
		desc_question ${_checkme}
		[ $? -ne 0 ] && continue
		# todo: input validation here
		    [ "${_checkme}" = "mdtmp" -a "$answ" = "1" ] && answ="8"
		    [ "${_checkme}" = "mdtmp" -a "$answ" = "2" ] && answ="0"
		if [ -n "${answ}" ]; then
		    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET ${_uninit}=\"${answ}\"

		    eval "${_uninit}=\"${answ}\"" 2>/dev/null
		fi
		[ "${_checkme}" = "nat_enable" ] && [ "${nat_enable}" != "0" ] && configure_nat
	    fi
	done
    done
    # flush unconfigured marker
    ${miscdir}/sqlcli ${dbdir}/local.sqlite DELETE FROM unconfigured
    # constants and static param. FIX ME
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET repo=\"http://bsdstore.ru\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET workdir=\"${workdir}\"
    _ret=`sysctl -qn net.inet.ip.fw.enable`
    if [ "${_ret}" = "1" ]; then
	_ret=1
    else
	_ret=0
    fi
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET ipfw_enable=\"${_ret}\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET fs=\"${_myfs}\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET jail_interface=\"${nics}\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nodedescr=\"${nodedescr}\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nodename=\"${nodename}\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET hostname=\"${hostname}\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET vnet=\"${vnet}\"
    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET racct=\"${racct}\"
}

phase6()
{
    . ${workdir}/${localcbsdconffile}
    ${ECHO} "${MAGENTA}[Stage 6: ${GREEN}authentication keys${MAGENTA}]${NORMAL}"

    install_sshkey
}

phase7()
{
    local SECCMD i cmd lnk dst modulename
    ${ECHO} "${MAGENTA}[Stage 7: ${GREEN}modules${MAGENTA}]${NORMAL}"

    [ ! -f "${etcdir}/modules.conf" ] && return 0

    # Install module
    for i in `cat ${etcdir}/modules.conf`; do
	[ ! -f "${moduledir}/${i}/securecmd" ] && continue
	    . ${moduledir}/${i}/securecmd
	    for cmd in ${SECCMD}; do
		if [ ! -h "${toolsdir}/${cmd}" ]; then
		    ln -sf ${moduledir}/${i}/${cmd} ${toolsdir}/${cmd}
		    ${ECHO} "${MAGENTA}Installing module ${i} cmd: ${GREEN}${cmd}${NORMAL}"
		fi
	    done
    done

    # Deinstall module
    for lnk in `find ${toolsdir} -type l`; do
	dst=`readlink ${lnk}`
	modulename=`dirname ${dst}|sed s:${moduledir}/::g`
	grep "^${modulename}" ${etcdir}/modules.conf >/dev/null 2>&1
	if [ $? -eq 1 ]; then
	    ${ECHO} "${MAGENTA}Removing module ${modulename} cmd: ${GREEN}${dst}${NORMAL}"
	    rm -f ${lnk}
	fi
    done

}

phase8()
{
    local OLD_FILES OLD_DIRS
    . ${distdir}/ObsoleteFiles

    # append for modules Obsolete cmd part
    if [ -f "${etcdir}/modules.conf" ]; then
	for i in `cat ${etcdir}/modules.conf`; do
            [ ! -f "${moduledir}/${i}/ObsoleteFiles" ] && continue
                    . ${moduledir}/${i}/ObsoleteFiles
        done
    fi

    ${ECHO} "${MAGENTA}[Stage 9: ${GREEN}cleanup${MAGENTA}]${NORMAL}"
    $ECHO "${MAGENTA} * Remove obsolete files..."
    for i in $OLD_FILES; do
	[ -f "${workdir}/${i}" ] && rm -f ${workdir}/${i}
    done
    for i in $OLD_DIRS; do
	[ -d "${workdir}/${i}" ] && rmdir ${workdir}/${i}
    done
    printf "${NORMAL}"
}





############ start locking section #############
start()
{
    if [ -n "${INITCFG}" ]; then
	inter=0
	ALWAYS_YES=1
	. "${INITCFG}" 2>/dev/null
    fi

    ECHO="echo -e"
    export workdir=${workdir:-"/usr/jails"}
    . ${globalconf}
    . ${distdir}/nc.subr
    . ${distdir}/tools.subr
    . ${distdir}/initenv.subr
    . ${distdir}/ansiicolor.subr

    if [ "${globalconf}" = "${localcbsdconf}" ]; then
	${ECHO} "${MAGENTA}Please use difference path for workdir. Not ${GREEN}${distdir}${NORMAL}"
	exit
    fi

    /usr/bin/more << EOF_HEADER
-------[${product} v.${myversion}]-------
 This is install/upgrade scripts for ${product}.
 Warning: this is highly experimental version, use at your own risk. Don't forget to backup
-----------------------------
EOF_HEADER

    getyesno "Do you want prepare or upgrade hier environment for ${product} now?" || exit 0

    ${ECHO} "${MAGENTA}>>> Installing or upgrading${NORMAL}"
    phase0
    phase1
    phase2
    phase3
    phase4
    phase5
# Inventory area
    phase6
    #Finnaly export new inventory from SQLite data for ASCii
    update_hwinfo
    env sqlcolnames="1" ${miscdir}/sqlcli ${dbdir}/local.sqlite "SELECT * FROM local" > ${inventory}
# end of Inventory
    phase7
    phase8

    configure_rsync

    if [ `grep ^cbsdd_enable= /etc/rc.conf|wc -l` = 0 ]; then
	getyesno "${BOLD}Shall i modify the /etc/rc.conf to sets cbsdd_enable=YES ?${NORMAL}" && sysrc -vf /etc/rc.conf cbsdd_enable=YES
    fi

    if [ `grep ^devfs_load_rulesets= /etc/rc.conf|wc -l` = 0 ]; then
	#we need initialization of ruleset for proper view on dev in jail
	if getyesno "${BOLD}Shall i modify the /etc/rc.conf to sets devfs_load_rulesets=YES?${NORMAL}"; then
	    sysrc -vf /etc/rc.conf devfs_load_rulesets=YES
	    /usr/sbin/service devfs restart
	fi
    fi

    . /etc/rc.conf
    if [ "${cbsd_workdir}" != "${workdir}" ]; then
	getyesno "${BOLD}Shall i modify the /etc/rc.conf to sets cbsd_workdir=\"${workdir}\"?: ${GREEN}$p${NORMAL}" && sysrc -vf /etc/rc.conf cbsd_workdir="${workdir}"
    fi

    if [ `grep ^rcshutdown_timeout= /etc/rc.conf|wc -l` = 0 ]; then
	getyesno "${BOLD}Shall i modify the /etc/rc.conf to sets rcshutdown_timeout=\"900\"?${NORMAL}" && sysrc -vf /etc/rc.conf rcshutdown_timeout="900"
    fi

    if [ `grep ^sshd_flags= /etc/rc.conf|wc -l` = 0 ]; then
	getyesno "${BOLD}Shall i modify default SSH daemon port from 22 to 22222 on this host via /etc/rc.conf and sshd_flags=\"-oPort=22222\" which is default for cbsd?${NORMAL}" && sysrc -vf /etc/rc.conf sshd_flags="-oPort=22222"
    fi

    if [ `grep ^local_periodic= /etc/periodic.conf 2>/dev/null|wc -l` = 0 ]; then
	getyesno "${BOLD}Shall i modify the /etc/periodic.conf to sets local_periodic=\"/usr/local/etc/periodic ${workdir}/etc/periodic\" ?${NORMAL}" && sysrc -vf /etc/periodic.conf local_periodic="/usr/local/etc/periodic ${workdir}/etc/periodic"
    fi

    phaseX

    hash -r
    ${ECHO} "${MAGENTA}>>> Done${NORMAL}"
    exit 0
}

### MAIN ###
[ $# -ne 1 ] && /usr/bin/lockf -t0 -s ${MYLOCK} env INITCFG="${INITCFG}" $0 start

case "$1" in
start)
    start;;
esac
