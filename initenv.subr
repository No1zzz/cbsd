#10.0.3
#

init_items_desc()
{
    ##description area
    nodename_desc="Short form for node name"
    nodeip_desc="Node managment IP address"
    nodedescr_desc="Node info/description"
    jnameserver_desc="Jails default DNS nameserver"
    nodeippool_desc="Jail pool IP address"
    nat_enable_desc="Enable NAT for RFC1918 networks"
    natip_desc="NAT IP"
    fbsdrepo_desc="Use official FreeBSD repository"
    mdtmp_desc="Configure memory disk"
    repo_desc="Use repository for images and template"
    workdir_desc="work directory"
    ipfw_enable_desc="Enable IPFW"
    zfsfeat_desc="Enable ZFS feature"
    jail_interface_desc="Jails NIC"
    parallel_desc="Parallel mode stop/start"
    stable_desc="Use STABLE branch"
}

init_items_default()
{
    INITIP=`/sbin/ifconfig \`route -n get 0.0.0.0 | awk '/interface/{print $2}'\` |awk '/inet /{print $2}'|head -n1`
    [ -z "${INITIP}" ] && IP="8.8.8.8"

    ##default area
    nodename_default=`hostname`
    nodeip_default="${INITIP}"
    nodedescr_default="Datacenter #5, Middle of Nowhere"
    jnameserver_default="${INITIP},8.8.8.8"
    nodeippool_default="10.0.0.0/16 ${INITIP}/24"
    nat_enable_default="Enable NAT"
    natip_default="${INITIP}"
    fbsdrepo_default="1"
    mdtmp_default="8"
    repo_default="http://bsdstore.ru"
    workdir_default="/usr/jails"
    ipfw_enable_default="1"
    zfsfeat_default="1"
    jail_interface_default="auto"
    parallel_default="5"
    stable_default="0"
}

# install file from $2 to $3 if not equal
# $1 addit.  arg for install
installne()
{
    if ! cmp -s $2 $3; then
	install $1 $2 $3
	return 1
    fi

    return 0
}


make_nat()
{
    case "${ok}" in
	"pf")
	    if [ `grep ^pf_load= /boot/loader.conf|wc -l` = 0 ]; then
		getyesno "${BOLD}Shall i modify the /boot/loader.conf to sets pf_load=YES ?${NORMAL}" && sysrc -vf /boot/loader.conf pf_load=YES
	    fi
	    truncate -s0 ${etcdir}/pfnat.conf

	    for _net in ${rfc1918}; do
		_nm=`echo ${_net} |tr "/" " "`
		${workdir}/sbin/netmask ${_nm} ${natip}
		if [ $? -ne 1 ]; then
		    cat >> ${etcdir}/pfnat.conf <<EOF
nat on ${ext_iface} from ${_net} to ! ${_net} -> ${natip}
EOF
		fi
	    done

	    answ="${ok}"
	    ok="ok"
	    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nat_enable=\"${answ}\"
	    return 0
            ;;
	"ipfw")
	    if getyesno "${BOLD}Shall i modify the /boot/loader.conf to sets ipfw_load=YES, ipfw_nat_load=YES, libalias_load=YES and net.inet.ip.fw.default_to_accept=1 ?${NORMAL}"; then
		sysrc -vf /boot/loader.conf net.inet.ip.fw.default_to_accept=1
		sysrc -vf /boot/loader.conf ipfw_nat_load=YES
		sysrc -vf /boot/loader.conf libalias_load=YES
	    fi
	    truncate -s0 ${etcdir}/ipfw.conf
	    _nm=`echo ${rfc1918} |tr " " ","`
	    #    ${workdir}/sbin/netmask ${_nm} ${natip}
	    #    if [ $? -ne 1 ]; then
	    _extiface=`route -n get default | awk '/interface:/{print $2}'`
	    ifconfig ${_extiface} >/dev/null 2>&1

	    if [ $? -eq 0 ]; then
	    cat >> ${etcdir}/ipfw.conf << EOF
/sbin/ipfw -q add ${fwcount_end} nat 123 all from ${_nm} to not ${_nm} any via ${_extiface}
/sbin/ipfw -q nat 123 config ip ${natip}
/sbin/ipfw -q add ${fwcount_end} nat 123 ip from any to ${natip} via ${_extiface}
EOF
	    fi

	    answ="${ok}"
	    ok="ok"
	    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET nat_enable=\"${answ}\"
	    return 0
	    ;;
    esac
return 1
}


configure_cron()
{
    local _minutesconf=0 _hourlyconf=0

    if [ -f "/var/cron/tabs/root" ]; then
            if [ `/usr/bin/grep periodic_minutes /var/cron/tabs/root |wc -l` = 0 ]; then
                _minutesconf=1
            fi
            if [ `/usr/bin/grep periodic_hourly /var/cron/tabs/root |wc -l` = 0 ]; then
                _hourlyconf=1
            fi
    fi

    [ ${_minutesconf} -eq 0 -a ${_hourlyconf} -eq 0 ] && return 0

    if getyesno "${BOLD}Shall i modify the /var/cron/tabs/root file to enable periodic cbsd tasks?${NORMAL}"; then
        [ ${_minutesconf} -eq 1 ] && echo "* * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_minutes /usr/sbin/periodic minutes > /dev/null 2>&1" >> /var/cron/tabs/root
        [ ${_hourlyconf} -eq 1 ] && echo "0 * * * * /usr/bin/lockf -s -t0 ${ftmpdir}/periodic_hourly /usr/sbin/periodic hourly > /dev/null 2>&1" >> /var/cron/tabs/root
    fi
}



# if arg then force configure
configure_nat()
{
    rfc1918="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
    ext_iface=`route -n get 0.0.0.0 |awk '/interface/{print $2}'`

    local _default
    local _net _nm

    . ${tools}

    if [ "${inter}" = "0" ]; then
	[ -z "${natip}" ] && natip=`cbsd -c "cbsdsql local UPDATE local SET natip=\"${natip}\"" 2>/dev/null`
	ok="${nat_enable}"
	make_nat
	return 0
    fi

    _default=`cbsd -c "cbsdsql local SELECT natip FROM local" 2>/dev/null`

    iptype ${_default} >/dev/null 2>&1

    if [ $? -ne 1 ]; then
	_default=`cbsd -c "cbsdsql local SELECT nodeip FROM local"`
    fi

   ${ECHO} "${BOLD}Set IP address as the aliasing NAT address, e.g: ${GREEN}${_default}${NORMAL}"
   read natip
   [ -z "${natip}" ] && natip="${_default}"

    if [ -z "${natip}" ]; then
	$ECHO "${MAGENTA}Error: empty natip value${NORMAL}"
	return 1
    fi

    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET natip=\"${natip}\"

    _default="pf"
    answ=0
    ok=
    while [ "$ok" != "ok" ]; do
	${ECHO} "${BOLD}Which one NAT framework should be use: [${GREEN}${_default}${NORMAL}${BOLD}]${NORMAL}"
	${ECHO} "${MAGENTA}(type FW name, eg pf,ipfw or \"exit\" for break)${NORMAL}"
	read ok leftover
	[ -z "$ok" ] && ok="${_default}"
	make_nat && return
	[ "${ok}" != "exit" ] || return
    done
}

rsyncd_enable()
{
    [ ! -f "${inventory}" ] || . ${inventory}
    if [ `grep ^cbsdrsyncd_enable="YES" /etc/rc.conf|wc -l` = 0 ]; then
	getyesno "${BOLD}Shall i modify the /etc/rc.conf to sets cbsdrsyncd_enable=\"YES\"${NORMAL}" && sysrc -vf /etc/rc.conf cbsdrsyncd_enable="YES"
    fi

    if [ -n "$nodeip" ]; then
	if [ `grep ^cbsdrsyncd_flags= /etc/rc.conf|wc -l` = 0 ]; then
	    getyesno "${BOLD}Shall i modify the /etc/rc.conf to sets cbsdrsyncd_flags=\"--config=${etcdir}/rsyncd.conf\" ?${NORMAL}" && sysrc -vf /etc/rc.conf cbsdrsyncd_flags="--config=${etcdir}/rsyncd.conf"
	fi
    fi

    [ -f "/usr/local/etc/rc.d/cbsdrsyncd" ] && sysrc -vf /usr/local/etc/rc.d/cbsdrsyncd required_files="${etcdir}/rsyncd.conf"
    service cbsdrsyncd onestart
}

rsyncd_disable()
{
    service cbsdrsyncd stop > /dev/null 2>&1
    sysrc -vf /etc/rc.conf cbsdrsyncd_enable="NO"
}

configure_rsync()
{
    [ ! -f "${etcdir}/rsyncd.conf" ] && installne "-o ${cbsduser} -g ${cbsduser} -m 444" ${distdir}/etc/defaults/rsyncd.conf ${etcdir}/rsyncd.conf

    if [ `grep -c cbsdrsyncd_enable /etc/rc.conf` = "1" ]; then
	return 0
    fi

    getyesno "${MAGENTA}Configure RSYNC services for jail migration?${NORMAL}" && rsyncd_enable
}

update_hwinfo()
{
    for _uninit in ${HWINI}; do
	eval answ="\$${_uninit}"
	if [ -n "${answ}" ]; then
	    ${miscdir}/sqlcli ${dbdir}/local.sqlite UPDATE local SET ${_uninit}=\"${answ}\"
	fi
    done
}

#user settings
USERINI="\
hostname \
nodeip \
nodedescr \
jnameserver \
nodeippool \
nat_enable \
natip \
fbsdrepo \
mdtmp \
repo \
workdir \
ipfw_enable \
zfsfeat \
jail_interface \
parallel \
stable"

#system settins
HWINI="fs ncpu physmem memtype disks cpumodel cpufreq kernhz sched eventtimer nics osrelease arch vnet racct"

